\documentclass[a4paper, 11pt]{article}
\usepackage[french]{babel}
\usepackage[utf8]{inputenc} 
\usepackage[T1]{fontenc}
\title{\textbf{Rapport Conception Logiciel}}
\usepackage{graphicx}
\author{Abdoulaye Fofana \\ Alexandre Dalibard--Brun}
\begin{document}
	\maketitle
\Large{\section{Introduction}
		\subsection{Description du projet}
		Notre projet portait sur le Sokoban.\\Le Sokoban est un jeu réflexion.\\
		Le concept est que le joueur dans le jeu est comme un ouvrier qui doit ranger des caisses ou des cartons dans les couloirs d'un entrepôt.\\Il peut se déplacer dans les quatre directions pour ranger les caisses ne peut déplacer qu'une caisse à la fois.\\
		Le niveau du jeu est terminé lorsqu'il réussit à placer toutes les caisses au bon endroit, et il passe ensuite au niveau prochain.
	
	\section{Plan du rapport :}
		Le rapport sera présenté comme suit :
		\begin{itemize}
			\item Objectifs du projet 
			\item L'architecture du projet
			\item Les Éléments techniques du projet
			\item Fonctionnalités du projet
			\item Une démonstration
			\item La conclusion
		\end{itemize}
	\section{Objectifs du projet : }
			Le projet nous demandait de concevoir un jeu Sokoban qui est définit dans la partie introduction.\\
			Pour faire le Sokoban, il nous fallait d'abord réaliser une grille qui est une liste de liste et faire les fonctions qui nous permettra d'interagir plus simplement avec cette dernière.\\Cette grille contiendra les caractères représentant les différents éléments du jeu. \\En effet, les niveaux du Sokoban sont représentés selon des caractères dans des fichiers souvent en. xsb, ils suivent la légende ci-dessous.\\
			\begin{center}
				\includegraphics[scale=1.3]{LegendeSokoban}
			\end{center}
			Ensuite, nous récupérons le contenue des fichiers .xsb et nous créons la grille qui représente le niveau.\\Une fois le niveau créé nous ajoutons les fonctions qui feront bouger les éléments comme le personnage et les caisses mais également les fonctions qui ajoutent chaque propriété aux autres éléments comme le fait que le mur ne peut pas bouger.\\
			Une fois ceci fait le jeu fonctionne mais il n'est encore représenté que par une chaine de caractère.\\Il nous reste donc à faire la partie graphique.\\Pour notre projet nous utiliserons Pygame.\\Nous affichons l'image de l'élément qui correspond au caractère de la chaine créer plutôt et affichons le niveau sur une fenêtre de Pygame.\\Grace à la gestion des évènement de Pygame nous activons les fonctions qui nous permet de faire bouger le personnage et pouvons ainsi commencer à jouer.
		\section{Architecture du projet}
			Pour notre projet Sokoban, nous avons un total de 4 classes.\\ 
			D'abord la classe Grille qui crée une grille selon un nombre de lignes et de colonnes que l'on donne en entrée.\\Ainsi que les fonctions qui nous permettront de la modifier et d'interagir avec.\\
			Cette classe ne sert qu'à créer une simple grille, elle pourrait être utilisée dans un autre programme.\\
			Ensuite, il y'a la classe LevelSok qui hérite de la classe Grille.\\Elle prend en entrée un fichier .xsb qui représente les niveaux de notre jeu, elle crée ensuite une grille en respectant les caractères contenus dans le fichier.\\ Elle comporte également les fonctions qui gèrent les déplacements et les interactions de chacun des éléments du niveau.\\
			Puis, nous avons la classe Jeu, elle prend en entrée un nombre entre 0 et 379, elle utilise ensuite la classe LevelSok pour créer le niveau correspondant au nombre indiqué en entrée.\\
			Pour ceci, nous récupérons la totalité des fichiers .xsb du dossier niveaux, puis nous les trions pour qu'ils soient dans l'ordre de 1 à 380.\\On y ajoute les fonctions qui activent celles de la classe LevelSok qui gèrent les mouvements du personnage.\\
			Enfin, la classe JeuPygame, elle va prendre en entrée un élément de classe Jeu, elle va ensuite afficher sur la fenêtre graphique de Pygame le niveau avec les images adaptées aux différents éléments du niveau.
	
		\section{Elements techniques}
			Afin de réaliser notre Sokoban, nous avons du utiliser différents paquetages.\\Tout d’abord nous avons utilisé "pygame", il nous permet de créer la fenêtre graphique qui affiche notre jeu, il nous permet également d’y afficher les éléments du Sokoban et ainsi de visualiser le niveau.\\Et enfin de gérer les évènements claviers afin d’activer les commandes du personnage.\\
			Ensuite, le paquetage "sys" est lié a l’usage de "pygame" il permet d’interagir avec les fonctions système et ainsi de pouvoir fermer la fenêtre graphique.\\
			Le paquetage "os" permet d’interagir avec le système d’exploitation.\\De ce paquetage nous utilisons "listdir", il permet à la fonction "init" de la classe Jeu, de récupérer l’ensemble des fichiers du dossier "niveau" qui sont l’ensemble des 380 niveaux de notre Sokoban.
		
		\section{Fonctionnalités implémentées}
			Déjà dans l'organisation du projet on était deux à faire le travail du coup on a fait un travail d'ensemble.\\
			Alexandre Dalibard-Brun était le chef de groupe et tapait les lignes de codes.\\
			Abdoulaye Fofana, lui il a aidé à faire les lignes de code et après le rapport du projet.\\
			Pour les fonctionnalités implémentées dans notre projet Sokoban, nous pouvons évidemment gérer les déplacements du personnage dans 4 directions pour pouvoir déplacer les caisses : haut, gauche, bas, droite.\\Elles sont respectivement captées par les touches Z, Q , S et D du clavier.\\
			Nous pouvons également réinitialiser le niveau en cours à zéro avec la touche R du clavier, ceci remettra le niveau à son état d’origine, c’est-à-dire la configuration donnée par les fichiers .xsb.\\
			Une fois le niveau en cours terminé, nous avons la possibilité de passer au prochain niveau en cliquant sur le bouton qui s’affiche au milieu de l’écran intitulé "Niveau suivant".\\Le joueur passe alors au niveau suivant.
	
		\section{Démonstration}
			Lorsque qu’on lance notre Sokoban, nous arrivons sur un menu composé d’un bouton central blanc et avec écrit en noir au centre "Jouer".\\Au dessus de ce bouton, on trouve le logo officiel du jeu Sokoban qui est écrit en japonais.\\Le fond, lui est composé d’une image d’une caisse trouvée sur internet.
			\begin{center}
				\includegraphics[scale=0.46]{imgMenu.png}
			\end{center}
			Lorsque l’on clique sur le bouton "Jouer", le niveau 1 de notre Sokoban s’affiche correctement, chaque élément est correctement affiché avec l’image lui correspondant.\\Les images de chaque élément ont été trouvées sur internet.\\Nous pouvons alors commencer à déplacer notre personnage et résoudre le niveau.\\Les commandes du jeu sont indiquées en haut à gauche de l’écran, il s’agit d’une image faite pour l’occasion, les commandes sont écrites en noir sur un fond orange. \\Le numéro du niveau en cours est également indiqué, il est à gauche des commandes.
			\begin{center}
				\includegraphics[scale=0.46]{imgNiveau1.png}
			\end{center}
			Une fois le niveau en cours complété, le texte "Bravo, vous avez terminé le niveau" s’affiche sur l’écran ainsi qu’un bouton blanc avec le texte "Niveau suivant" en noir.\\ Si on clique sur ce bouton, le niveau suivant s’affiche, puis une fois résolu, le texte et le bouton s’affichent à nouveau sur l’écran, ce qui permet d’aller au niveau suivant etc.
		
			\begin{center}
				\includegraphics[scale=0.46]{imgNiveausuivant.png}
			\end{center}
			\begin{center}
				\includegraphics[scale=0.46]{imgNiveau2.png}
			\end{center}
			En termes de temps d’exécution et de fluidité, avec l’œil humain le jeu est très fluide, on ne détecte aucun ralentissement.\\ L ’affichage du menu, des niveaux ou des mouvements de personnage se font très rapidement et sans aucune impression de ralentissent.
	\section{Conclusion}
		En conclusion, notre Sokoban fonctionne, les niveaux s’affichent correctement sur la fenêtre graphique.\\Nous pouvons gérer les mouvements de notre personnage dans les 4 directions et ainsi résoudre le niveau.\\Nous pouvons par la suite, aller au niveau suivant et le résoudre à nouveau etc.\\
		Pour les améliorations, nous pourrions rajouter un moyen de choisir le niveau auquel nous voulons jouer depuis le menu.\\Ceci afin de pouvoir reprendre le jeu sans avoir à tout recommencer depuis le début si nous n’avions pas fini l’intégralité des niveaux.\\
		Nous pouvons également penser à un moyen de revenir au mouvement précédent, ce qui permettrait de ne pas avoir à réinitialiser le niveau à zéro si nous faisons une erreur ou si nous appuyons sur la mauvaise touche.}
			
			
		
\end{document}